package org.sopware.services.demo.whiteboard;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;

/**
 * This class was generated by Apache CXF 2.3.1 Wed Dec 22 08:56:13 CET 2010
 * Generated source version: 2.3.1
 * 
 */

public final class Whiteboard_Localhost_Client {

	private static final QName SERVICE_NAME = new QName(
			"http://services.sopware.org/demo/Whiteboard", "WhiteboardProvider");
	private Whiteboard port;
	private WhiteboardProvider ss;
	private ObjectFactory of;
	
	private Whiteboard_Localhost_Client(URL wsdlURL) {
		ss = new WhiteboardProvider(wsdlURL, SERVICE_NAME);
		port = ss.getLocalhost();
		of = new ObjectFactory();
	}

	public static void main(String args[]) throws Exception {
		URL wsdlURL = WhiteboardProvider.WSDL_LOCATION;
		if (args.length > 0) {
			File wsdlFile = new File(args[0]);
			try {
				if (wsdlFile.exists()) {
					wsdlURL = wsdlFile.toURI().toURL();
				} else {
					wsdlURL = new URL(args[0]);
				}
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}
		
		Whiteboard_Localhost_Client client = new Whiteboard_Localhost_Client(wsdlURL);
		String key = "Hasi";
		AnyType at = client.createAny("Rulez");
		
		client.write(key, at);
		client.echo(at);
		
		Read r = client.createRead(key);
		client.read(r);
		System.exit(0);
	}
	
	private AnyType createAny(String value) {
		AnyType at = of.createAnyType();
		at.setAny(createRead(value));
		return at;
	}
	
	private Read createRead(String key) {
		Read read = of.createRead();
		read.setKey(key);
		return read;
	}
	
	private void echo(AnyType parameter) {
		System.out.println("Invoking echo...");
		AnyType _echo__return = port.echo(parameter);
		System.out.println("echo.result=" + _echo__return);
	}
	
	private void read(Read _read_parameters)	{
		System.out.println("Invoking read...");

		try {
			org.sopware.services.demo.whiteboard.AnyType _read__return = port.read(_read_parameters);
			System.out.println("read.result=" + _read__return);

		} catch (ReadFaultMsg e) {
			System.out
					.println("Expected exception: read_faultMsg has occurred.");
			System.out.println(e.toString());
		}
	}
	
	private void write(String key, AnyType value) {
		System.out.println("Invoking write...");
		port.write(key, value);
	}
}
