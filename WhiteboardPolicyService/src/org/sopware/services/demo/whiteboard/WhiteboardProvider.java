
/*
 * 
 */

package org.sopware.services.demo.whiteboard;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.3.1
 * Wed Dec 22 08:46:48 CET 2010
 * Generated source version: 2.3.1
 * 
 */


@WebServiceClient(name = "WhiteboardProvider", 
                  wsdlLocation = "file:/Users/dwolz/git/EasyB_In_Equinox_Testing/TsfSample/TsfWsdlSample/Whiteboard.wsdl",
                  targetNamespace = "http://services.sopware.org/demo/Whiteboard") 
public class WhiteboardProvider extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://services.sopware.org/demo/Whiteboard", "WhiteboardProvider");
    public final static QName Localhost = new QName("http://services.sopware.org/demo/Whiteboard", "localhost");
    static {
        URL url = null;
        try {
            url = new URL("file:/Users/dwolz/git/EasyB_In_Equinox_Testing/TsfSample/TsfWsdlSample/Whiteboard.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:/Users/jkindler/workspaces/GiTonTheHub/EasyB_In_Equinox_Testing/TsfSample/TsfWsdlSample/Whiteboard.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public WhiteboardProvider(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WhiteboardProvider(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WhiteboardProvider() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     * 
     * @return
     *     returns Whiteboard
     */
    @WebEndpoint(name = "localhost")
    public Whiteboard getLocalhost() {
        return super.getPort(Localhost, Whiteboard.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Whiteboard
     */
    @WebEndpoint(name = "localhost")
    public Whiteboard getLocalhost(WebServiceFeature... features) {
        return super.getPort(Localhost, Whiteboard.class, features);
    }

}
